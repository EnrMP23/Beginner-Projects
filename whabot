import asyncio
from datetime import datetime, timedelta
from twilio.rest import Client

# Configuración de Twilio (reemplaza con tus credenciales)
account_sid = 'YOUR_ACCOUNT_SID'
auth_token = 'YOUR_AUTH_TOKEN'
client = Client(account_sid, auth_token)

# Diccionario para almacenar los recordatorios
recordatorios = {}

# Función para solicitar datos al usuario
def solicitar_datos():
    numero = input("Ingrese el número de WhatsApp en formato internacional (ej. +521234567890): ")
    minutos = int(input("Ingrese el tiempo en minutos para el recordatorio: "))
    mensaje = input("Ingrese el mensaje para el recordatorio: ")
    return numero, minutos, mensaje

# Función para agregar un recordatorio
async def agregar_recordatorio(numero: str, minutos: int, mensaje: str):
    hora_envio = datetime.now() + timedelta(minutes=minutos)
    recordatorios[(numero, mensaje)] = hora_envio
    print(f"Recordatorio programado para {numero} en {minutos} minutos.")

# Función para enviar un mensaje de WhatsApp a través de Twilio
async def enviar_mensaje(numero: str, mensaje: str):
    client.messages.create(
        from_='whatsapp:+14155238886',  # Número de Twilio para WhatsApp
        body=mensaje,
        to=f'whatsapp:{numero}'
    )
    print(f"Mensaje enviado a {numero}: {mensaje}")

# Función para verificar y enviar recordatorios
async def verificar_recordatorios():
    while True:
        now = datetime.now()
        for (numero, mensaje), hora_envio in list(recordatorios.items()):
            if now >= hora_envio:
                await enviar_mensaje(numero, mensaje)
                del recordatorios[(numero, mensaje)]  # Eliminar el recordatorio enviado
        await asyncio.sleep(60)  # Espera 60 segundos antes de verificar de nuevo

# Función principal que inicia el bucle de eventos y programa recordatorios
async def main():
    # Solicitar datos al usuario y programar un recordatorio
    numero, minutos, mensaje = solicitar_datos()
    await agregar_recordatorio(numero, minutos, mensaje)

    # Inicia la verificación de recordatorios en segundo plano
    await verificar_recordatorios()

# Ejecutar la función principal en el bucle de eventos de asyncio
asyncio.run(main())

